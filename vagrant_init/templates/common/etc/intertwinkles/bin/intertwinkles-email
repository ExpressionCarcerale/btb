#!/usr/bin/env python

# Author: By John Nishinaga

import re, os, sys
import psycopg2
import sha, random, base64
import getpass

DB_CONNECTION = "host=localhost dbname=$MAIL_DB_NAME user=$MAIL_DB_USER password=$MAIL_DB_PASSWORD"

def usage():
    sys.stderr.write("""Usage:
    %s list [regex]
    %s add|edit|delete <email>
""" % (sys.argv[0], sys.argv[0]))

_db_connection = None
def get_db_connection():
    global _db_connection
    if not _db_connection:
        _db_connection = psycopg2.connect(DB_CONNECTION)
    return _db_connection

def migrate():
    """
    Migrates from the old tables to the new version.  Already executed but kept
    around for reference.
    """
    conn = get_db_connection()
    curs = conn.cursor()
    try:
        curs.execute("DROP TABLE yerk_emails;")
    except:
        conn.rollback()
    curs.execute("""
        CREATE TABLE yerk_emails (
            id serial PRIMARY KEY,
            email varchar(80) UNIQUE NOT NULL,
            password varchar(80),
            created timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
            modified timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP
        );
    """)
    curs.execute("""
        SELECT username||'@'||domain AS email, password FROM postfix_virtual_mailbox_maps;
    """)
    for email, password in curs.fetchall():
        curs.execute("""
            INSERT INTO yerk_emails (email, password)
            VALUES (%(email)s, %(password)s)""", {
                "email": email,
                "password": sshaDigest(password),
        })
    conn.commit()

def sshaDigest(passphrase, salt=None):
    """ returns a ssha digest (sha-1 with salt)

    this can be used to encrypt a passphrase
    using sha-1 encryption, with salt.
    compatible with openldap fields
    >>> res = sshaDigest('xxx')
    >>> len(res)
    46
    >>> res = sshaDigest('xsazdzxx')
    >>> len(res)
    46
    >>> sshaDigest('xxx').startswith('{SSHA}')
    True
    """
    if salt is None:
        salt = ''
        for i in range(8):
            salt += chr(random.randint(0, 255))
    s = sha.sha()
    s.update(passphrase)
    s.update(salt)
    encoded = base64.encodestring(s.digest()+salt).rstrip()
    crypt = '{SSHA}' + encoded
    return crypt

EMAIL_RE = re.compile("^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,4}$", re.IGNORECASE)
def email_is_valid(email):
    return not not EMAIL_RE.match(email)

def error_and_quit(message = None):
    if message:
        sys.stderr.write(message + "\n")
    usage()
    sys.exit(1)

def list_emails(regex = ""):
    try:
        regex_re = re.compile(regex)
    except:
        error_and_quit("Invalid regex: %s" % regex)
    conn = get_db_connection()
    curs = conn.cursor()
    curs.execute("SELECT email, modified FROM yerk_emails")
    results = []
    for email, modified in curs.fetchall():
        if not regex_re.search(email):
            continue
        results.append([email, modified])
    if len(results) == 0:
        print "No results"
    else:
        print "%40s | Last Modified " % "Email"
        print "%s-|----------------------------" % ("-" * 40)
        for email, modified in results:
            print "%40s | %s" % (email, modified)

def add_email(email):
    conn, curs, from_db = _add_delete_common(email)
    if from_db:
        print "Editing %s last modified %s..." % (from_db["email"], from_db["modified"])
    else:
        print "Adding %s..." % email
    password = getpass.getpass("Password: ")
    if len(password) < 6:
        error_and_quit("Password must be at least 6 characters")
    password2 = getpass.getpass("Password (again): ")
    if password != password2:
        error_and_quit("Passwords do not match")
    if from_db:
        curs.execute("""
            UPDATE yerk_emails
            SET password=%(password)s, modified=CURRENT_TIMESTAMP
            WHERE id=%(id)s""", {
            "password": sshaDigest(password),
            "id": int(from_db["id"]),
        })
    else:
        curs.execute("""
            INSERT INTO yerk_emails (email, password)
            VALUES (%(email)s, %(password)s)""", {
                "email": email,
                "password": sshaDigest(password),
        })
    conn.commit()
    if from_db:
        print "Updated %s" % email
    else:
        os.system("""echo "Gobbledy, gobbledy, goo." | mail -s 'Welcome!' %s""" % email)
        print "Created %s" % email

def delete_email(email):
    conn, curs, from_db = _add_delete_common(email)
    if not from_db:
        error_and_quit("Unknown email: %s" % email)
    print "Deleting %s last modified %s..." % (from_db["email"], from_db["modified"])
    answer = raw_input("Are you sure? (Y/N): ")
    if answer.upper()[0:1] == "Y":
        curs.execute("""
            DELETE FROM yerk_emails
            WHERE id=%(id)s""", {
            "id": int(from_db["id"]),
        })
        conn.commit()
        print "Deleted %s" % email
    else:
        print "Aborted"

def _add_delete_common(email):
    if not email_is_valid(email):
        error_and_quit("Invalid email: %s" % email)
    conn = get_db_connection()
    curs = conn.cursor()
    curs.execute("SELECT id, email, created, modified FROM yerk_emails WHERE email=%(email)s", {"email": email})
    result = curs.fetchall()
    if len(result) == 1:
        from_db = {
            "id": result[0][0],
            "email": result[0][1],
            "created": result[0][2],
            "modified": result[0][3],
        }
    else:
        from_db = None
    return conn, curs, from_db

if __name__ == "__main__":
    try:
        if len(sys.argv) < 2:
            error_and_quit()
        command = sys.argv[1]
        try:
            option = sys.argv[2]
        except:
            option = ""
        if command == "list":
            list_emails(option)
        elif command == "add" or command == "edit":
            add_email(option)
        elif command == "delete":
            delete_email(option)
        else:
            error_and_quit()
    except KeyboardInterrupt:
        print "Aborting..."
